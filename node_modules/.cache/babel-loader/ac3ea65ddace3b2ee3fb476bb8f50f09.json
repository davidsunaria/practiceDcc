{"ast":null,"code":"var _jsxFileName = \"/home/shine/practiceDcc/src/web/pages/Board/Board.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Card from \"tt-frontend-components/Card/Card.tsx\";\nimport { TASK_PRICE } from \"tt-frontend-constants\";\nimport { clearUserData } from 'tt-frontend-utils/Service';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Board = ({\n  history\n}) => {\n  _s();\n\n  const task = {\n    id: \"\",\n    cardNumber: \"\",\n    cardDescription: \"New Task - \",\n    type: \"todo\",\n    time: 0,\n    price: \"\",\n    timeStarted: \"\"\n  };\n  const [maxId, setMaxID] = useState(151);\n  const [toDoBoard, setToDoBoard] = useState([{\n    id: \"task-151\",\n    cardNumber: \"TK-151\",\n    cardDescription: \"Create a test TO DO app\",\n    type: \"todo\",\n    time: 0,\n    price: \"\",\n    timeStarted: \"\"\n  }]);\n  const [inProgressBoard, setInProgressBoard] = useState([]);\n  const [completeBoard, setCompleteBoard] = useState([]);\n\n  const formatMilliseconds = t => {\n    let sign = 1; // 1 for positive and 0 for negative\n\n    if (t < 0) {\n      t = -t;\n      sign = 0;\n    }\n\n    const pad = function (n) {\n      return n < 10 ? '0' + n : n;\n    };\n\n    var s, m, d, h;\n    s = Math.floor(t / 1000);\n    m = Math.floor(s / 60);\n    s = s % 60;\n    h = Math.floor(m / 60);\n    m = m % 60;\n\n    if (m === 60) {\n      h++;\n      m = 0;\n    } //const result = [pad(h), pad(m), pad(s)].join(':');\n\n\n    return s;\n  };\n\n  let ticketBtnClickHandler = data => {\n    let eventType = data.type;\n    let localData = data;\n    let toDoState = JSON.parse(JSON.stringify(toDoBoard));\n    let inProgressState = JSON.parse(JSON.stringify(inProgressBoard));\n    let completeBoardState = JSON.parse(JSON.stringify(completeBoard));\n\n    if (eventType === \"todo\") {\n      let index = toDoState.findIndex(e => e.id == data.id);\n\n      if (index > -1) {\n        let date = new Date();\n        toDoState.splice(index, 1);\n        setToDoBoard(toDoState);\n        localData.type = 'inprogress';\n        localData.timeStarted = date.getTime();\n        inProgressState.push(localData);\n        setInProgressBoard(inProgressState);\n      }\n    } else {\n      let index = inProgressState.findIndex(e => e.id == data.id);\n\n      if (index > -1) {\n        inProgressState.splice(index, 1);\n        inProgressState.map((obj, idx) => {\n          obj.time = formatMilliseconds(new Date().getTime() - obj.timeStarted);\n        });\n        setInProgressBoard(inProgressState);\n        localData.price = Math.round(localData.time / 3600 * TASK_PRICE * 100) / 100;\n        localData.type = 'complete';\n        completeBoardState.push(localData);\n        setCompleteBoard(completeBoardState);\n      }\n    }\n  };\n\n  const addTaskHandler = () => {\n    let newTask = JSON.parse(JSON.stringify(task));\n    let id = maxId + 1;\n    newTask.id = \"task- \" + id;\n    newTask.cardNumber = \"TK-\" + id;\n    newTask.cardDescription = newTask.cardDescription + id;\n    toDoBoard.push(newTask);\n    setToDoBoard(toDoBoard);\n    setMaxID(id);\n  };\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container-fluid pt-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"font-weight-light text-white\",\n        children: [\"Kanban Board\", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-right floatRight\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            onClick: clearUserData,\n            className: \"btn btn-primary btn-sm text-right\",\n            children: \"Log out\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row flex-row flex-sm-nowrap py-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-sm-4 col-md-4 col-xl-4\",\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            type: \"To-Do\",\n            clickHandler: data => ticketBtnClickHandler(data),\n            data: toDoBoard,\n            addTaskHandler: () => {\n              addTaskHandler();\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-sm-4 col-md-4 col-xl-4\",\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            type: \"In-Progress\",\n            clickHandler: data => ticketBtnClickHandler(data),\n            data: inProgressBoard\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-sm-4 col-md-4 col-xl-4\",\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            type: \"Done\",\n            data: completeBoard\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Board, \"LCudxn937L9HzuQ51ayLskczReU=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/home/shine/practiceDcc/src/web/pages/Board/Board.tsx"],"names":["React","useState","Card","TASK_PRICE","clearUserData","Board","history","task","id","cardNumber","cardDescription","type","time","price","timeStarted","maxId","setMaxID","toDoBoard","setToDoBoard","inProgressBoard","setInProgressBoard","completeBoard","setCompleteBoard","formatMilliseconds","t","sign","pad","n","s","m","d","h","Math","floor","ticketBtnClickHandler","data","eventType","localData","toDoState","JSON","parse","stringify","inProgressState","completeBoardState","index","findIndex","e","date","Date","splice","getTime","push","map","obj","idx","round","addTaskHandler","newTask"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport Input from \"tt-frontend-components/Input/Input.tsx\";\nimport Button from \"tt-frontend-components/Button/Button.tsx\";\nimport Card from \"tt-frontend-components/Card/Card.tsx\";\nimport {TASK_PRICE} from \"tt-frontend-constants\";\nimport { useStoreActions } from 'easy-peasy';\nimport {clearUserData} from 'tt-frontend-utils/Service'\n\ninterface RouteProps {\n  history: any;\n}\n\nconst Board: React.FC<RouteProps> = ({ history }): JSX.Element => {\n  const task                                    = {id: \"\", cardNumber: \"\", cardDescription:\"New Task - \", type: \"todo\", time: 0, price : \"\", timeStarted: \"\"};\n  const [maxId, setMaxID]                       = useState<number>(151);\n  const [toDoBoard, setToDoBoard]               = useState<any>([{id: \"task-151\", cardNumber: \"TK-151\", cardDescription:\"Create a test TO DO app\", type: \"todo\", time: 0, price : \"\", timeStarted: \"\"}]);\n  const [inProgressBoard, setInProgressBoard]   = useState<any>([]);\n  const [completeBoard, setCompleteBoard]       = useState<any>([]);\n\n  const formatMilliseconds = (t) => {\n    let sign = 1; // 1 for positive and 0 for negative\n    if (t < 0) {\n        t = -t;\n        sign = 0;\n    }\n    const pad = function(n){ return n < 10 ? '0' + n : n; };\n    var s,m,d,h;\n    s = Math.floor(t / 1000);\n    m = Math.floor(s / 60);\n    s = s % 60;\n    h = Math.floor(m / 60);\n    m = m % 60;\n\n    if( m === 60 ){\n        h++;\n        m = 0;\n    }\n    //const result = [pad(h), pad(m), pad(s)].join(':');\n    return s;\n  }  \n\n  let ticketBtnClickHandler = (data) => {\n    let eventType = data.type\n    let localData = data;\n    let toDoState       = JSON.parse(JSON.stringify(toDoBoard));\n    let inProgressState = JSON.parse(JSON.stringify(inProgressBoard));\n    let completeBoardState = JSON.parse(JSON.stringify(completeBoard));\n\n    if (eventType === \"todo\") {\n      let index = toDoState.findIndex(e => e.id == data.id);\n      if(index > -1) {\n        let date = new Date();\n        toDoState.splice(index, 1);\n        setToDoBoard(toDoState);\n        localData.type = 'inprogress';\n        localData.timeStarted = date.getTime();\n        inProgressState.push(localData);\n\n        setInProgressBoard(inProgressState);\n      }\n    } else {\n      let index = inProgressState.findIndex(e => e.id == data.id);\n      if(index > -1) {\n        inProgressState.splice(index, 1);\n        inProgressState.map((obj, idx) => {\n          obj.time = formatMilliseconds(new Date().getTime() - obj.timeStarted);\n        })\n        setInProgressBoard(inProgressState);\n        localData.price = Math.round((localData.time / 3600)  * TASK_PRICE * 100 ) / 100;\n        localData.type = 'complete';\n        completeBoardState.push(localData);\n\n        setCompleteBoard(completeBoardState);\n      }\n    }\n  }\n\n  const addTaskHandler = () => {\n    let newTask = JSON.parse(JSON.stringify(task));\n    let id = maxId + 1\n    newTask.id = \"task- \"+ id;\n    newTask.cardNumber = \"TK-\" + id;\n    newTask.cardDescription = newTask.cardDescription + id;\n    toDoBoard.push(newTask);\n    setToDoBoard(toDoBoard);\n    setMaxID(id);\n  }\n\n  return (\n    <React.Fragment>\n      <div className=\"container-fluid pt-3\">\n        <h3 className=\"font-weight-light text-white\">Kanban Board\n\n          <span className=\"text-right floatRight\">\n            <button type=\"button\" onClick={clearUserData} className=\"btn btn-primary btn-sm text-right\">\n              Log out\n            </button>\n          </span>\n        </h3>\n\n\n        <div className=\"row flex-row flex-sm-nowrap py-3\">\n          <div className=\"col-sm-4 col-md-4 col-xl-4\">\n            <Card type=\"To-Do\" clickHandler={(data) => ticketBtnClickHandler(data)} data={toDoBoard} addTaskHandler={() => {addTaskHandler()}}/>\n          </div>\n          <div className=\"col-sm-4 col-md-4 col-xl-4\">\n            <Card type=\"In-Progress\" clickHandler={(data) => ticketBtnClickHandler(data)} data={inProgressBoard}/>\n          </div>\n          <div className=\"col-sm-4 col-md-4 col-xl-4\">\n            <Card type=\"Done\" data={completeBoard}/>\n          </div>\n        </div>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}