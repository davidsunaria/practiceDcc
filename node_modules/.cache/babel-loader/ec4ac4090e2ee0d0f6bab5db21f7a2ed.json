{"ast":null,"code":"var _jsxFileName = \"/home/shine/practiceDcc/src/web/pages/Authentication/ForgotPassword.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport Input from \"tt-frontend-components/Input/Input.tsx\";\nimport Button from \"tt-frontend-components/Button/Button.tsx\";\nimport { ERROR_INVALID_EMAIL } from \"tt-frontend-message\";\nimport { useStoreActions } from 'easy-peasy';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ForgotPassword = ({\n  history\n}) => {\n  _s();\n\n  const [email, setEmailAddress] = useState('');\n  const [emailError, setEmailError] = useState(false);\n  const [disableButton, setDisableButton] = useState(false);\n  const mailformat = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/;\n  const forgotPassword = useStoreActions(actions => actions.authentication.forgotPassword);\n\n  const authenticateUser = async () => {\n    setEmailError(false);\n\n    if (email.trim() == '') {\n      setEmailError(true);\n      return false;\n    }\n\n    if (email.trim()) {\n      if (!email.match(mailformat)) {\n        setEmailError(true);\n        return false;\n      }\n    }\n\n    setDisableButton(true);\n    let formData = {\n      email: email\n    };\n    let response = await forgotPassword(formData);\n    setDisableButton(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-sm-9 col-md-7 col-lg-5 mx-auto\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card card-signin my-5\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-body\",\n              children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n                className: \"card-title text-center\",\n                children: \"Forgot Passwaord\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 49,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n                className: \"form-signin\",\n                children: [/*#__PURE__*/_jsxDEV(Input, {\n                  label: \"Email Address\",\n                  type: 'email',\n                  value: email,\n                  handleInputChange: e => setEmailAddress(e.target.value),\n                  error: emailError,\n                  placeholder: \"Email address\",\n                  errorMessage: ERROR_INVALID_EMAIL,\n                  id: \"inputEmail\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 51,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  type: 'button',\n                  onClick: () => disableButton ? \"\" : authenticateUser(),\n                  label: \"Submit\",\n                  disableBtn: disableButton\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 61,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n                  className: \"my-4\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 62,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"forgot-password text-right\",\n                  children: [\"Go back to \", /*#__PURE__*/_jsxDEV(Link, {\n                    to: \"/login\",\n                    children: \"Sign In\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 64,\n                    columnNumber: 34\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 63,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 50,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ForgotPassword, \"p9C1V2Zxm4PUaY4P09WHd9pxxzk=\", false, function () {\n  return [useStoreActions];\n});\n\n_c = ForgotPassword;\nexport default ForgotPassword;\n\nvar _c;\n\n$RefreshReg$(_c, \"ForgotPassword\");","map":{"version":3,"sources":["/home/shine/practiceDcc/src/web/pages/Authentication/ForgotPassword.tsx"],"names":["React","useState","Link","Input","Button","ERROR_INVALID_EMAIL","useStoreActions","ForgotPassword","history","email","setEmailAddress","emailError","setEmailError","disableButton","setDisableButton","mailformat","forgotPassword","actions","authentication","authenticateUser","trim","match","formData","response","e","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport Input from \"tt-frontend-components/Input/Input.tsx\";\nimport Button from \"tt-frontend-components/Button/Button.tsx\";\nimport {ERROR_INVALID_EMAIL} from \"tt-frontend-message\";\nimport { useStoreActions } from 'easy-peasy';\n\ninterface RouteProps {\n  history: any;\n}\n\nconst ForgotPassword: React.FC<RouteProps> = ({ history }): JSX.Element => {\n  const [email, setEmailAddress]           = useState<string>('');\n  const [emailError, setEmailError]        = useState<boolean>(false);\n  const [disableButton, setDisableButton]  = useState<boolean>(false);\n  const mailformat                         = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/;\n  const forgotPassword                     = useStoreActions((actions) => actions.authentication.forgotPassword);\n\n  const authenticateUser = async() => {\n    setEmailError(false);\n\n    if (email.trim() == '') {\n      setEmailError(true);\n      return false;\n    }\n\n    if (email.trim()) {\n      if (!email.match(mailformat)) {\n        setEmailError(true);\n        return false;\n      }\n    }\n\n    setDisableButton(true);\n\n    let formData = {email: email}\n    let response = await forgotPassword(formData);\n\n    setDisableButton(false);\n  }\n\n  return (\n    <React.Fragment>\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-sm-9 col-md-7 col-lg-5 mx-auto\">\n            <div className=\"card card-signin my-5\">\n              <div className=\"card-body\">\n                <h5 className=\"card-title text-center\">Forgot Passwaord</h5>\n                <form className=\"form-signin\">\n                  <Input\n                    label={\"Email Address\"}\n                    type={'email'}\n                    value={email}\n                    handleInputChange={(e) => setEmailAddress(e.target.value)}\n                    error={emailError}\n                    placeholder={\"Email address\"}\n                    errorMessage={ERROR_INVALID_EMAIL}\n                    id=\"inputEmail\"\n                  />\n                  <Button type={'button'} onClick={() => disableButton ? \"\" : authenticateUser()} label={\"Submit\"} disableBtn={disableButton} />\n                  <hr className=\"my-4\" />\n                  <p className=\"forgot-password text-right\">\n                      Go back to <Link to=\"/login\">Sign In</Link>\n                  </p>\n                </form>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default ForgotPassword;\n"]},"metadata":{},"sourceType":"module"}