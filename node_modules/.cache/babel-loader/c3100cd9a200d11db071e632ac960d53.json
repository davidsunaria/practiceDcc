{"ast":null,"code":"var _jsxFileName = \"/home/shine/practiceDcc/src/web/pages/Authentication/ResetPassword.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport Input from \"tt-frontend-components/Input/Input.tsx\";\nimport Button from \"tt-frontend-components/Button/Button.tsx\";\nimport { ERROR_INVALID_PASSWORD, ERROR_INVALID_CONFIRM_PASSWORD, ERROR_EMPTY_CONFIRM_PASSWORD } from \"tt-frontend-message\";\nimport { useStoreActions } from 'easy-peasy';\nimport queryString from 'query-string';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ResetPassword = ({\n  history\n}) => {\n  _s();\n\n  const queryStrings = queryString.parse(window.location.search);\n  const token = queryStrings['token'];\n  const [password, setPassword] = useState('');\n  const [passwordError, setPasswordError] = useState(false);\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [confirmPasswordError, setConfirmPasswordError] = useState(false);\n  const [doNotMatchError, setDoNotMatchError] = useState(false);\n  const [disableButton, setDisableButton] = useState(false);\n  const resetPassword = useStoreActions(actions => actions.authentication.resetPassword);\n\n  const signupUser = async () => {\n    setPasswordError(false);\n    setConfirmPasswordError(false);\n    setDoNotMatchError(false);\n\n    if (password.trim() == '') {\n      setPasswordError(true);\n      return false;\n    }\n\n    if (confirmPassword.trim() == '') {\n      setConfirmPasswordError(true);\n      setDoNotMatchError(false);\n      return false;\n    }\n\n    if (password.trim() !== confirmPassword.trim()) {\n      setConfirmPasswordError(true);\n      setDoNotMatchError(true);\n      return false;\n    }\n\n    setDisableButton(true);\n    let formData = {\n      password: password,\n      token\n    };\n    let response = await resetPassword(formData);\n    setDisableButton(false);\n\n    if (response) {\n      history.push('/login');\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-sm-9 col-md-7 col-lg-5 mx-auto\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card card-signin my-5\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-body\",\n              children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n                className: \"card-title text-center\",\n                children: \"Reset Password\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 65,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n                className: \"form-signin\",\n                children: [/*#__PURE__*/_jsxDEV(Input, {\n                  label: \"New Password\",\n                  type: 'password',\n                  value: password,\n                  handleInputChange: e => setPassword(e.target.value),\n                  error: passwordError,\n                  placeholder: \"New Password\",\n                  errorMessage: ERROR_INVALID_PASSWORD,\n                  id: \"inputPassword\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 67,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Input, {\n                  label: \"Confirm Password\",\n                  type: 'password',\n                  value: confirmPassword,\n                  handleInputChange: e => setConfirmPassword(e.target.value),\n                  error: confirmPasswordError,\n                  placeholder: \"Confirm Password\",\n                  errorMessage: !doNotMatchError && confirmPasswordError ? ERROR_EMPTY_CONFIRM_PASSWORD : confirmPasswordError && doNotMatchError ? ERROR_INVALID_CONFIRM_PASSWORD : '',\n                  id: \"inputConfirmPassword\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 78,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  type: 'button',\n                  onClick: () => disableButton ? \"\" : signupUser(),\n                  label: \"Reset Password\",\n                  disableBtn: disableButton\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 89,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n                  className: \"my-4\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 91,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"forgot-password text-right\",\n                  children: [\"Go back to \", /*#__PURE__*/_jsxDEV(Link, {\n                    to: \"/login\",\n                    children: \"Sign In\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 93,\n                    columnNumber: 34\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 92,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 66,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ResetPassword, \"ZDEnm6f9l4Uxsq+/Ttaj9XwVtY4=\", false, function () {\n  return [useStoreActions];\n});\n\n_c = ResetPassword;\nexport default ResetPassword;\n\nvar _c;\n\n$RefreshReg$(_c, \"ResetPassword\");","map":{"version":3,"sources":["/home/shine/practiceDcc/src/web/pages/Authentication/ResetPassword.tsx"],"names":["React","useState","Link","Input","Button","ERROR_INVALID_PASSWORD","ERROR_INVALID_CONFIRM_PASSWORD","ERROR_EMPTY_CONFIRM_PASSWORD","useStoreActions","queryString","ResetPassword","history","queryStrings","parse","window","location","search","token","password","setPassword","passwordError","setPasswordError","confirmPassword","setConfirmPassword","confirmPasswordError","setConfirmPasswordError","doNotMatchError","setDoNotMatchError","disableButton","setDisableButton","resetPassword","actions","authentication","signupUser","trim","formData","response","push","e","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport Input from \"tt-frontend-components/Input/Input.tsx\";\nimport Button from \"tt-frontend-components/Button/Button.tsx\";\nimport {ERROR_INVALID_PASSWORD, ERROR_INVALID_CONFIRM_PASSWORD, ERROR_EMPTY_CONFIRM_PASSWORD} from \"tt-frontend-message\";\nimport { useStoreActions } from 'easy-peasy';\nimport queryString from 'query-string';\ninterface RouteProps {\n  history: any;\n}\n\nconst ResetPassword: React.FC<RouteProps> = ({ history }): JSX.Element => {\n  const queryStrings = queryString.parse(window.location.search);\n  const token: any = queryStrings['token'];\n  const [password, setPassword]           = useState<string>('');\n  const [passwordError, setPasswordError] = useState<boolean>(false);\n  const [confirmPassword, setConfirmPassword]           = useState<string>('');\n  const [confirmPasswordError, setConfirmPasswordError] = useState<boolean>(false);\n  const [doNotMatchError, setDoNotMatchError] = useState<boolean>(false);\n  const [disableButton, setDisableButton]     = useState<boolean>(false);\n  const resetPassword                        = useStoreActions((actions) => actions.authentication.resetPassword);\n\n\n  const signupUser = async() => {\n    setPasswordError(false);\n    setConfirmPasswordError(false);\n    setDoNotMatchError(false);\n\n    if (password.trim() == '') {\n      setPasswordError(true);\n      return false;\n    }\n\n    if (confirmPassword.trim() == '') {\n      setConfirmPasswordError(true);\n      setDoNotMatchError(false);\n      return false;\n    }\n\n    if (password.trim() !== confirmPassword.trim()) {\n      setConfirmPasswordError(true);\n      setDoNotMatchError(true);\n      return false;\n    }\n\n    setDisableButton(true);\n\n    let formData = {password: password, token}\n    let response = await resetPassword(formData);\n\n    setDisableButton(false);\n\n    if (response) {\n      history.push('/login');\n    }\n  }\n\n  return (\n    <React.Fragment>\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-sm-9 col-md-7 col-lg-5 mx-auto\">\n            <div className=\"card card-signin my-5\">\n              <div className=\"card-body\">\n                <h5 className=\"card-title text-center\">Reset Password</h5>\n                <form className=\"form-signin\">\n                  <Input\n                    label={\"New Password\"}\n                    type={'password'}\n                    value={password}\n                    handleInputChange={(e) => setPassword(e.target.value)}\n                    error={passwordError}\n                    placeholder={\"New Password\"}\n                    errorMessage={ERROR_INVALID_PASSWORD}\n                    id=\"inputPassword\"\n                  />\n\n                  <Input\n                    label={\"Confirm Password\"}\n                    type={'password'}\n                    value={confirmPassword}\n                    handleInputChange={(e) => setConfirmPassword(e.target.value)}\n                    error={confirmPasswordError}\n                    placeholder={\"Confirm Password\"}\n                    errorMessage={(!doNotMatchError && confirmPasswordError) ? ERROR_EMPTY_CONFIRM_PASSWORD : (confirmPasswordError && doNotMatchError) ?  ERROR_INVALID_CONFIRM_PASSWORD : ''}\n                    id=\"inputConfirmPassword\"\n                  />\n\n                  <Button type={'button'} onClick={() => disableButton ? \"\" : signupUser()} label={\"Reset Password\"} disableBtn={disableButton} />\n\n                  <hr className=\"my-4\" />\n                  <p className=\"forgot-password text-right\">\n                      Go back to <Link to=\"/login\">Sign In</Link>\n                  </p>\n                </form>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default ResetPassword;\n"]},"metadata":{},"sourceType":"module"}