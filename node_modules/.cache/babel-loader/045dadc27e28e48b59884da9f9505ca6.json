{"ast":null,"code":"var _jsxFileName = \"/home/shine/practiceDcc/src/web/pages/Authentication/Register.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport Input from \"tt-frontend-components/Input/Input.tsx\";\nimport Button from \"tt-frontend-components/Button/Button.tsx\";\nimport { ERROR_INVALID_EMAIL, ERROR_INVALID_PASSWORD, ERROR_FIRST_NAME, ERROR_LAST_NAME, ERROR_INVALID_CONFIRM_PASSWORD, ERROR_EMPTY_CONFIRM_PASSWORD } from \"tt-frontend-message\";\nimport { useStoreActions } from 'easy-peasy';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Register = ({\n  history\n}) => {\n  _s();\n\n  const [firstname, setFirstname] = useState('');\n  const [firstnameError, setFirstnameError] = useState(false);\n  const [lastname, setLastname] = useState('');\n  const [lastnameError, setLastnameError] = useState(false);\n  const [email, setEmailAddress] = useState('');\n  const [emailError, setEmailError] = useState(false);\n  const [password, setPassword] = useState('');\n  const [passwordError, setPasswordError] = useState(false);\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [confirmPasswordError, setConfirmPasswordError] = useState(false);\n  const [doNotMatchError, setDoNotMatchError] = useState(false);\n  const [disableButton, setDisableButton] = useState(false);\n  const mailformat = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/;\n  const userSignUp = useStoreActions(actions => actions.authentication.userSignUp);\n\n  const signupUser = async () => {\n    setFirstnameError(false);\n    setLastnameError(false);\n    setEmailError(false);\n    setPasswordError(false);\n    setConfirmPasswordError(false);\n    setDoNotMatchError(false);\n\n    if (firstname.trim() == '') {\n      setFirstnameError(true);\n      return false;\n    }\n\n    if (lastname.trim() == '') {\n      setLastnameError(true);\n      return false;\n    }\n\n    if (email.trim() == '') {\n      setEmailError(true);\n      return false;\n    }\n\n    if (email.trim()) {\n      if (!email.match(mailformat)) {\n        setEmailError(true);\n        return false;\n      }\n    }\n\n    if (password.trim() == '') {\n      setPasswordError(true);\n      return false;\n    }\n\n    if (confirmPassword.trim() == '') {\n      setConfirmPasswordError(true);\n      setDoNotMatchError(false);\n      return false;\n    }\n\n    if (password.trim() !== confirmPassword.trim()) {\n      setConfirmPasswordError(true);\n      setDoNotMatchError(true);\n      return false;\n    }\n\n    setDisableButton(true);\n    let formData = {\n      email: email,\n      password: password,\n      firstName: firstname,\n      lastName: lastname\n    };\n    let response = await userSignUp(formData);\n    setDisableButton(false);\n\n    if (response) {\n      history.push('/login');\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-sm-9 col-md-7 col-lg-5 mx-auto\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card card-signin my-5\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-body\",\n              children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n                className: \"card-title text-center\",\n                children: \"Sign Up\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 96,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n                className: \"form-signin\",\n                children: [/*#__PURE__*/_jsxDEV(Input, {\n                  label: \"Firstname\",\n                  type: 'text',\n                  value: firstname,\n                  handleInputChange: e => setFirstname(e.target.value),\n                  error: firstnameError,\n                  placeholder: \"Firstname\",\n                  errorMessage: ERROR_FIRST_NAME,\n                  id: \"inputFirstName\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 98,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Input, {\n                  label: \"Lastname\",\n                  type: 'text',\n                  value: lastname,\n                  handleInputChange: e => setLastname(e.target.value),\n                  error: lastnameError,\n                  placeholder: \"Lastname\",\n                  errorMessage: ERROR_LAST_NAME,\n                  id: \"inputLastName\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 109,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Input, {\n                  label: \"Email Address\",\n                  type: 'email',\n                  value: email,\n                  handleInputChange: e => setEmailAddress(e.target.value),\n                  error: emailError,\n                  placeholder: \"Email address\",\n                  errorMessage: ERROR_INVALID_EMAIL,\n                  id: \"inputEmail\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 120,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Input, {\n                  label: \"Password\",\n                  type: 'password',\n                  value: password,\n                  handleInputChange: e => setPassword(e.target.value),\n                  error: passwordError,\n                  placeholder: \"Password\",\n                  errorMessage: ERROR_INVALID_PASSWORD,\n                  id: \"inputPassword\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 131,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Input, {\n                  label: \"Confirm Password\",\n                  type: 'password',\n                  value: confirmPassword,\n                  handleInputChange: e => setConfirmPassword(e.target.value),\n                  error: confirmPasswordError,\n                  placeholder: \"Confirm Password\",\n                  errorMessage: !doNotMatchError && confirmPasswordError ? ERROR_EMPTY_CONFIRM_PASSWORD : confirmPasswordError && doNotMatchError ? ERROR_INVALID_CONFIRM_PASSWORD : '',\n                  id: \"inputConfirmPassword\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 142,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  type: 'button',\n                  onClick: () => disableButton ? \"\" : signupUser(),\n                  label: \"Sign Up\",\n                  disableBtn: disableButton\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 153,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n                  className: \"my-4\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 155,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"forgot-password text-right\",\n                  children: [\"Already registered? \", /*#__PURE__*/_jsxDEV(Link, {\n                    to: \"/login\",\n                    children: \"Sign In\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 157,\n                    columnNumber: 43\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 156,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 97,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Register, \"6HbFiREjLgBSGFQ0Hf55Nr6MjuA=\", false, function () {\n  return [useStoreActions];\n});\n\n_c = Register;\nexport default Register;\n\nvar _c;\n\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"sources":["/home/shine/practiceDcc/src/web/pages/Authentication/Register.tsx"],"names":["React","useState","Link","Input","Button","ERROR_INVALID_EMAIL","ERROR_INVALID_PASSWORD","ERROR_FIRST_NAME","ERROR_LAST_NAME","ERROR_INVALID_CONFIRM_PASSWORD","ERROR_EMPTY_CONFIRM_PASSWORD","useStoreActions","Register","history","firstname","setFirstname","firstnameError","setFirstnameError","lastname","setLastname","lastnameError","setLastnameError","email","setEmailAddress","emailError","setEmailError","password","setPassword","passwordError","setPasswordError","confirmPassword","setConfirmPassword","confirmPasswordError","setConfirmPasswordError","doNotMatchError","setDoNotMatchError","disableButton","setDisableButton","mailformat","userSignUp","actions","authentication","signupUser","trim","match","formData","firstName","lastName","response","push","e","target","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAA2C,OAA3C;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAOC,KAAP,MAAkB,wCAAlB;AACA,OAAOC,MAAP,MAAmB,0CAAnB;AACA,SAAQC,mBAAR,EAA6BC,sBAA7B,EAAqDC,gBAArD,EAAuEC,eAAvE,EAAwFC,8BAAxF,EAAwHC,4BAAxH,QAA2J,qBAA3J;AACA,SAASC,eAAT,QAAgC,YAAhC;;;AAMA,MAAMC,QAA8B,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAA8B;AAAA;;AACnE,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAAsCd,QAAQ,CAAS,EAAT,CAApD;AACA,QAAM,CAACe,cAAD,EAAiBC,iBAAjB,IAAsChB,QAAQ,CAAU,KAAV,CAApD;AACA,QAAM,CAACiB,QAAD,EAAWC,WAAX,IAAsClB,QAAQ,CAAS,EAAT,CAApD;AACA,QAAM,CAACmB,aAAD,EAAgBC,gBAAhB,IAAsCpB,QAAQ,CAAU,KAAV,CAApD;AACA,QAAM,CAACqB,KAAD,EAAQC,eAAR,IAAsCtB,QAAQ,CAAS,EAAT,CAApD;AACA,QAAM,CAACuB,UAAD,EAAaC,aAAb,IAAsCxB,QAAQ,CAAU,KAAV,CAApD;AACA,QAAM,CAACyB,QAAD,EAAWC,WAAX,IAAsC1B,QAAQ,CAAS,EAAT,CAApD;AACA,QAAM,CAAC2B,aAAD,EAAgBC,gBAAhB,IAAsC5B,QAAQ,CAAU,KAAV,CAApD;AACA,QAAM,CAAC6B,eAAD,EAAkBC,kBAAlB,IAAkD9B,QAAQ,CAAS,EAAT,CAAhE;AACA,QAAM,CAAC+B,oBAAD,EAAuBC,uBAAvB,IAAkDhC,QAAQ,CAAU,KAAV,CAAhE;AACA,QAAM,CAACiC,eAAD,EAAkBC,kBAAlB,IAAwClC,QAAQ,CAAU,KAAV,CAAtD;AACA,QAAM,CAACmC,aAAD,EAAgBC,gBAAhB,IAAwCpC,QAAQ,CAAU,KAAV,CAAtD;AACA,QAAMqC,UAAU,GAAG,sEAAnB;AAEA,QAAMC,UAAU,GAAG5B,eAAe,CAAE6B,OAAD,IAAaA,OAAO,CAACC,cAAR,CAAuBF,UAArC,CAAlC;;AAEA,QAAMG,UAAU,GAAG,YAAW;AAC5BzB,IAAAA,iBAAiB,CAAC,KAAD,CAAjB;AACAI,IAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACAI,IAAAA,aAAa,CAAC,KAAD,CAAb;AACAI,IAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACAI,IAAAA,uBAAuB,CAAC,KAAD,CAAvB;AACAE,IAAAA,kBAAkB,CAAC,KAAD,CAAlB;;AAEA,QAAIrB,SAAS,CAAC6B,IAAV,MAAoB,EAAxB,EAA4B;AAC1B1B,MAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACA,aAAO,KAAP;AACD;;AAED,QAAIC,QAAQ,CAACyB,IAAT,MAAmB,EAAvB,EAA2B;AACzBtB,MAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACA,aAAO,KAAP;AACD;;AAED,QAAIC,KAAK,CAACqB,IAAN,MAAgB,EAApB,EAAwB;AACtBlB,MAAAA,aAAa,CAAC,IAAD,CAAb;AACA,aAAO,KAAP;AACD;;AAED,QAAIH,KAAK,CAACqB,IAAN,EAAJ,EAAkB;AAChB,UAAI,CAACrB,KAAK,CAACsB,KAAN,CAAYN,UAAZ,CAAL,EAA8B;AAC5Bb,QAAAA,aAAa,CAAC,IAAD,CAAb;AACA,eAAO,KAAP;AACD;AACF;;AAED,QAAIC,QAAQ,CAACiB,IAAT,MAAmB,EAAvB,EAA2B;AACzBd,MAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACA,aAAO,KAAP;AACD;;AAED,QAAIC,eAAe,CAACa,IAAhB,MAA0B,EAA9B,EAAkC;AAChCV,MAAAA,uBAAuB,CAAC,IAAD,CAAvB;AACAE,MAAAA,kBAAkB,CAAC,KAAD,CAAlB;AACA,aAAO,KAAP;AACD;;AAED,QAAIT,QAAQ,CAACiB,IAAT,OAAoBb,eAAe,CAACa,IAAhB,EAAxB,EAAgD;AAC9CV,MAAAA,uBAAuB,CAAC,IAAD,CAAvB;AACAE,MAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACA,aAAO,KAAP;AACD;;AAGDE,IAAAA,gBAAgB,CAAC,IAAD,CAAhB;AAEA,QAAIQ,QAAQ,GAAG;AAACvB,MAAAA,KAAK,EAAEA,KAAR;AAAeI,MAAAA,QAAQ,EAAEA,QAAzB;AAAmCoB,MAAAA,SAAS,EAAGhC,SAA/C;AAA0DiC,MAAAA,QAAQ,EAAE7B;AAApE,KAAf;AACA,QAAI8B,QAAQ,GAAG,MAAMT,UAAU,CAACM,QAAD,CAA/B;AAEAR,IAAAA,gBAAgB,CAAC,KAAD,CAAhB;;AAEA,QAAIW,QAAJ,EAAc;AACZnC,MAAAA,OAAO,CAACoC,IAAR,CAAa,QAAb;AACD;AACF,GA1DD;;AA4DA,sBACE,QAAC,KAAD,CAAO,QAAP;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,6BACE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA,+BACE;AAAK,UAAA,SAAS,EAAC,oCAAf;AAAA,iCACE;AAAK,YAAA,SAAS,EAAC,uBAAf;AAAA,mCACE;AAAK,cAAA,SAAS,EAAC,WAAf;AAAA,sCACE;AAAI,gBAAA,SAAS,EAAC,wBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,eAEE;AAAM,gBAAA,SAAS,EAAC,aAAhB;AAAA,wCACE,QAAC,KAAD;AACE,kBAAA,KAAK,EAAE,WADT;AAEE,kBAAA,IAAI,EAAE,MAFR;AAGE,kBAAA,KAAK,EAAEnC,SAHT;AAIE,kBAAA,iBAAiB,EAAGoC,CAAD,IAAOnC,YAAY,CAACmC,CAAC,CAACC,MAAF,CAASC,KAAV,CAJxC;AAKE,kBAAA,KAAK,EAAEpC,cALT;AAME,kBAAA,WAAW,EAAE,WANf;AAOE,kBAAA,YAAY,EAAET,gBAPhB;AAQE,kBAAA,EAAE,EAAC;AARL;AAAA;AAAA;AAAA;AAAA,wBADF,eAYE,QAAC,KAAD;AACE,kBAAA,KAAK,EAAE,UADT;AAEE,kBAAA,IAAI,EAAE,MAFR;AAGE,kBAAA,KAAK,EAAEW,QAHT;AAIE,kBAAA,iBAAiB,EAAGgC,CAAD,IAAO/B,WAAW,CAAC+B,CAAC,CAACC,MAAF,CAASC,KAAV,CAJvC;AAKE,kBAAA,KAAK,EAAEhC,aALT;AAME,kBAAA,WAAW,EAAE,UANf;AAOE,kBAAA,YAAY,EAAEZ,eAPhB;AAQE,kBAAA,EAAE,EAAC;AARL;AAAA;AAAA;AAAA;AAAA,wBAZF,eAuBE,QAAC,KAAD;AACE,kBAAA,KAAK,EAAE,eADT;AAEE,kBAAA,IAAI,EAAE,OAFR;AAGE,kBAAA,KAAK,EAAEc,KAHT;AAIE,kBAAA,iBAAiB,EAAG4B,CAAD,IAAO3B,eAAe,CAAC2B,CAAC,CAACC,MAAF,CAASC,KAAV,CAJ3C;AAKE,kBAAA,KAAK,EAAE5B,UALT;AAME,kBAAA,WAAW,EAAE,eANf;AAOE,kBAAA,YAAY,EAAEnB,mBAPhB;AAQE,kBAAA,EAAE,EAAC;AARL;AAAA;AAAA;AAAA;AAAA,wBAvBF,eAkCE,QAAC,KAAD;AACE,kBAAA,KAAK,EAAE,UADT;AAEE,kBAAA,IAAI,EAAE,UAFR;AAGE,kBAAA,KAAK,EAAEqB,QAHT;AAIE,kBAAA,iBAAiB,EAAGwB,CAAD,IAAOvB,WAAW,CAACuB,CAAC,CAACC,MAAF,CAASC,KAAV,CAJvC;AAKE,kBAAA,KAAK,EAAExB,aALT;AAME,kBAAA,WAAW,EAAE,UANf;AAOE,kBAAA,YAAY,EAAEtB,sBAPhB;AAQE,kBAAA,EAAE,EAAC;AARL;AAAA;AAAA;AAAA;AAAA,wBAlCF,eA6CE,QAAC,KAAD;AACE,kBAAA,KAAK,EAAE,kBADT;AAEE,kBAAA,IAAI,EAAE,UAFR;AAGE,kBAAA,KAAK,EAAEwB,eAHT;AAIE,kBAAA,iBAAiB,EAAGoB,CAAD,IAAOnB,kBAAkB,CAACmB,CAAC,CAACC,MAAF,CAASC,KAAV,CAJ9C;AAKE,kBAAA,KAAK,EAAEpB,oBALT;AAME,kBAAA,WAAW,EAAE,kBANf;AAOE,kBAAA,YAAY,EAAG,CAACE,eAAD,IAAoBF,oBAArB,GAA6CtB,4BAA7C,GAA6EsB,oBAAoB,IAAIE,eAAzB,GAA6CzB,8BAA7C,GAA8E,EAP1K;AAQE,kBAAA,EAAE,EAAC;AARL;AAAA;AAAA;AAAA;AAAA,wBA7CF,eAwDE,QAAC,MAAD;AAAQ,kBAAA,IAAI,EAAE,QAAd;AAAwB,kBAAA,OAAO,EAAE,MAAM2B,aAAa,GAAG,EAAH,GAAQM,UAAU,EAAtE;AAA0E,kBAAA,KAAK,EAAE,SAAjF;AAA4F,kBAAA,UAAU,EAAEN;AAAxG;AAAA;AAAA;AAAA;AAAA,wBAxDF,eA0DE;AAAI,kBAAA,SAAS,EAAC;AAAd;AAAA;AAAA;AAAA;AAAA,wBA1DF,eA2DE;AAAG,kBAAA,SAAS,EAAC,4BAAb;AAAA,kEACwB,QAAC,IAAD;AAAM,oBAAA,EAAE,EAAC,QAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADxB;AAAA;AAAA;AAAA;AAAA;AAAA,wBA3DF;AAAA;AAAA;AAAA;AAAA;AAAA,sBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AA8ED,CA3JD;;GAAMxB,Q;UAeeD,e;;;KAffC,Q;AA6JN,eAAeA,QAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport Input from \"tt-frontend-components/Input/Input.tsx\";\nimport Button from \"tt-frontend-components/Button/Button.tsx\";\nimport {ERROR_INVALID_EMAIL, ERROR_INVALID_PASSWORD, ERROR_FIRST_NAME, ERROR_LAST_NAME, ERROR_INVALID_CONFIRM_PASSWORD, ERROR_EMPTY_CONFIRM_PASSWORD} from \"tt-frontend-message\";\nimport { useStoreActions } from 'easy-peasy';\n\ninterface RouteProps {\n  history: any;\n}\n\nconst Register: React.FC<RouteProps> = ({ history }): JSX.Element => {\n  const [firstname, setFirstname]           = useState<string>('');\n  const [firstnameError, setFirstnameError] = useState<boolean>(false);\n  const [lastname, setLastname]             = useState<string>('');\n  const [lastnameError, setLastnameError]   = useState<boolean>(false);\n  const [email, setEmailAddress]            = useState<string>('');\n  const [emailError, setEmailError]         = useState<boolean>(false);\n  const [password, setPassword]             = useState<string>('');\n  const [passwordError, setPasswordError]   = useState<boolean>(false);\n  const [confirmPassword, setConfirmPassword]           = useState<string>('');\n  const [confirmPasswordError, setConfirmPasswordError] = useState<boolean>(false);\n  const [doNotMatchError, setDoNotMatchError] = useState<boolean>(false);\n  const [disableButton, setDisableButton]     = useState<boolean>(false);\n  const mailformat = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/;\n\n  const userSignUp = useStoreActions((actions) => actions.authentication.userSignUp);\n\n  const signupUser = async() => {\n    setFirstnameError(false);\n    setLastnameError(false);\n    setEmailError(false);\n    setPasswordError(false);\n    setConfirmPasswordError(false);\n    setDoNotMatchError(false);\n\n    if (firstname.trim() == '') {\n      setFirstnameError(true);\n      return false;\n    }\n\n    if (lastname.trim() == '') {\n      setLastnameError(true);\n      return false;\n    }\n\n    if (email.trim() == '') {\n      setEmailError(true);\n      return false;\n    }\n\n    if (email.trim()) {\n      if (!email.match(mailformat)) {\n        setEmailError(true);\n        return false;\n      }\n    }\n\n    if (password.trim() == '') {\n      setPasswordError(true);\n      return false;\n    }\n\n    if (confirmPassword.trim() == '') {\n      setConfirmPasswordError(true);\n      setDoNotMatchError(false);\n      return false;\n    }\n\n    if (password.trim() !== confirmPassword.trim()) {\n      setConfirmPasswordError(true);\n      setDoNotMatchError(true);\n      return false;\n    }\n\n\n    setDisableButton(true);\n\n    let formData = {email: email, password: password, firstName : firstname, lastName: lastname}\n    let response = await userSignUp(formData);\n\n    setDisableButton(false);\n\n    if (response) {\n      history.push('/login');\n    }\n  }\n\n  return (\n    <React.Fragment>\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-sm-9 col-md-7 col-lg-5 mx-auto\">\n            <div className=\"card card-signin my-5\">\n              <div className=\"card-body\">\n                <h5 className=\"card-title text-center\">Sign Up</h5>\n                <form className=\"form-signin\">\n                  <Input\n                    label={\"Firstname\"}\n                    type={'text'}\n                    value={firstname}\n                    handleInputChange={(e) => setFirstname(e.target.value)}\n                    error={firstnameError}\n                    placeholder={\"Firstname\"}\n                    errorMessage={ERROR_FIRST_NAME}\n                    id=\"inputFirstName\"\n                  />\n\n                  <Input\n                    label={\"Lastname\"}\n                    type={'text'}\n                    value={lastname}\n                    handleInputChange={(e) => setLastname(e.target.value)}\n                    error={lastnameError}\n                    placeholder={\"Lastname\"}\n                    errorMessage={ERROR_LAST_NAME}\n                    id=\"inputLastName\"\n                  />\n\n                  <Input\n                    label={\"Email Address\"}\n                    type={'email'}\n                    value={email}\n                    handleInputChange={(e) => setEmailAddress(e.target.value)}\n                    error={emailError}\n                    placeholder={\"Email address\"}\n                    errorMessage={ERROR_INVALID_EMAIL}\n                    id=\"inputEmail\"\n                  />\n\n                  <Input\n                    label={\"Password\"}\n                    type={'password'}\n                    value={password}\n                    handleInputChange={(e) => setPassword(e.target.value)}\n                    error={passwordError}\n                    placeholder={\"Password\"}\n                    errorMessage={ERROR_INVALID_PASSWORD}\n                    id=\"inputPassword\"\n                  />\n\n                  <Input\n                    label={\"Confirm Password\"}\n                    type={'password'}\n                    value={confirmPassword}\n                    handleInputChange={(e) => setConfirmPassword(e.target.value)}\n                    error={confirmPasswordError}\n                    placeholder={\"Confirm Password\"}\n                    errorMessage={(!doNotMatchError && confirmPasswordError) ? ERROR_EMPTY_CONFIRM_PASSWORD : (confirmPasswordError && doNotMatchError) ?  ERROR_INVALID_CONFIRM_PASSWORD : ''}\n                    id=\"inputConfirmPassword\"\n                  />\n\n                  <Button type={'button'} onClick={() => disableButton ? \"\" : signupUser()} label={\"Sign Up\"} disableBtn={disableButton} />\n\n                  <hr className=\"my-4\" />\n                  <p className=\"forgot-password text-right\">\n                      Already registered? <Link to=\"/login\">Sign In</Link>\n                  </p>\n                </form>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default Register;\n"]},"metadata":{},"sourceType":"module"}