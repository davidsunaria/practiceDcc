{"ast":null,"code":"import { thunk } from 'easy-peasy';\nimport { API_ERROR_MESSAGES } from \"tt-frontend-message\";\nimport { userSignUp, loginUser, forgotPassword, resetPassword } from 'tt-frontend-api/AuthApi.js';\nimport { toast } from 'react-toastify';\nconst authenticationModel = {\n  token: '',\n  error: '',\n  userDirectLogin: thunk(async (actions, payload, {\n    getStoreActions\n  }) => {\n    let response = await loginUser(payload);\n    toast.dismiss();\n\n    if (!response.success) {\n      toast.error(API_ERROR_MESSAGES[response.messageCode]);\n      return false;\n    } else {\n      localStorage.setItem('auth_token', response.data.token);\n      localStorage.setItem('isLoggedIn', 'true');\n      toast.success(API_ERROR_MESSAGES[response.messageCode]);\n      return true;\n    }\n  }),\n  userSignUp: thunk(async (actions, payload, {\n    getStoreActions\n  }) => {\n    let response = await userSignUp(payload);\n    toast.dismiss();\n    console.log(response);\n\n    if (!response.success) {\n      if (response && response.errors && response.errors.password) {\n        toast.error(response.errors.password.message);\n        return false;\n      }\n\n      toast.error(API_ERROR_MESSAGES[response.messageCode]);\n      return false;\n    } else {\n      toast.success(API_ERROR_MESSAGES[response.messageCode]);\n      return true;\n    }\n  }),\n  forgotPassword: thunk(async (actions, payload, {\n    getStoreActions\n  }) => {\n    let response = await forgotPassword(payload);\n    toast.dismiss();\n\n    if (!response.success) {\n      toast.error(API_ERROR_MESSAGES[response.messageCode]);\n      return false;\n    } else {\n      toast.success(API_ERROR_MESSAGES[response.messageCode]);\n      return true;\n    }\n  }),\n  resetPassword: thunk(async (actions, payload, {\n    getStoreActions\n  }) => {\n    let response = await resetPassword(payload);\n    toast.dismiss();\n\n    if (!response.success) {\n      toast.error(API_ERROR_MESSAGES[response.messageCode]);\n      return false;\n    } else {\n      toast.success(API_ERROR_MESSAGES[response.messageCode]);\n      return true;\n    }\n  })\n};\nexport default authenticationModel;","map":{"version":3,"sources":["/home/shine/practiceDcc/src/model/Authentication/index.ts"],"names":["thunk","API_ERROR_MESSAGES","userSignUp","loginUser","forgotPassword","resetPassword","toast","authenticationModel","token","error","userDirectLogin","actions","payload","getStoreActions","response","dismiss","success","messageCode","localStorage","setItem","data","console","log","errors","password","message"],"mappings":"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","sourcesContent":["import { Action, action, thunk, Thunk } from 'easy-peasy';\nimport crypt from 'crypto-js';\nimport {API_ERROR_MESSAGES} from \"tt-frontend-message\";\nimport {\n  userSignUp,\n  loginUser,\n  logoutUser,\n  forgotPassword,\n  resetPassword\n} from 'tt-frontend-api/AuthApi.js';\nimport { toast } from 'react-toastify';\n\ninterface UserAuth {\n  userName: string;\n  password: string;\n}\n\nexport interface AuthenticationModel {\n  token: string;\n  error: string;\n\n  userDirectLogin: Thunk<AuthenticationModel>;\n  userSignUp: Thunk<AuthenticationModel>;\n  forgotPassword: Thunk<AuthenticationModel, string>;\n  resetPassword: Thunk<AuthenticationModel, any>;\n\n}\n\nconst authenticationModel: AuthenticationModel = {\n  token: '',\n  error: '',\n\n\n  userDirectLogin: thunk(async (actions, payload, { getStoreActions }) => {\n    let response = await loginUser(payload);\n\t\ttoast.dismiss();\n\n\t\tif (!response.success) {\n\t\t\ttoast.error(API_ERROR_MESSAGES[response.messageCode])\n\t\t\treturn false\n\t\t} else {\n      localStorage.setItem('auth_token', response.data.token)\n      localStorage.setItem('isLoggedIn', 'true')\n\t\t\ttoast.success(API_ERROR_MESSAGES[response.messageCode])\n\t\t\treturn true;\n\t\t}\n  }),\n\n  userSignUp : thunk(async (actions, payload, { getStoreActions }) => {\n    let response = await userSignUp(payload);\n\t\ttoast.dismiss();\n\n     console.log(response);\n\n\t\tif (!response.success) {\n      if(response && response.errors && response.errors.password) {\n        toast.error(response.errors.password.message);\n        return false;\n      }\n\t\t\ttoast.error(API_ERROR_MESSAGES[response.messageCode])\n\t\t\treturn false\n\t\t} else {\n\t\t\ttoast.success(API_ERROR_MESSAGES[response.messageCode])\n\t\t\treturn true;\n\t\t}\n  }),\n\n  forgotPassword : thunk(async (actions, payload, { getStoreActions }) => {\n    let response = await forgotPassword(payload);\n\t\ttoast.dismiss();\n\n\t\tif (!response.success) {\n\t\t\ttoast.error(API_ERROR_MESSAGES[response.messageCode])\n\t\t\treturn false\n\t\t} else {\n\t\t\ttoast.success(API_ERROR_MESSAGES[response.messageCode])\n\t\t\treturn true;\n\t\t}\n  }),\n\n  resetPassword : thunk(async (actions, payload, { getStoreActions }) => {\n    let response = await resetPassword(payload);\n\t\ttoast.dismiss();\n\n\t\tif (!response.success) {\n\t\t\ttoast.error(API_ERROR_MESSAGES[response.messageCode])\n\t\t\treturn false\n\t\t} else {\n\t\t\ttoast.success(API_ERROR_MESSAGES[response.messageCode])\n\t\t\treturn true;\n\t\t}\n  }),\n};\n\nexport default authenticationModel;\n"]},"metadata":{},"sourceType":"module"}