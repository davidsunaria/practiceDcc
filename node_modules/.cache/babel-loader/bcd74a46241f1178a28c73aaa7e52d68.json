{"ast":null,"code":"import axios from 'axios';\nimport { getToken, setToken } from 'tt-frontend-utils/Service.js';\nconst AuthInstance = axios.create();\nAuthInstance.interceptors.response.use(function (response) {\n  if (response.headers) {\n    localStorage.setItem('api_token', response.headers.api_token);\n  }\n\n  return response;\n}, function (error) {\n  if (!error.response) {\n    return {\n      data: {\n        data: \"\",\n        message: \"server_error\",\n        status: 500\n      }\n    };\n  } else {\n    if (error.response.status == 500) {\n      return {\n        data: {\n          data: \"\",\n          message: \"server_error\",\n          status: 500\n        }\n      };\n    }\n\n    console.log(error);\n    /*\n    if(error.response.status == 422) {\n    return {data : {data : \"\", message : error.password, status : 500}}\n    }*/\n\n    return Promise.reject(error);\n  }\n});\nAuthInstance.interceptors.request.use(function (config) {\n  const token = getToken();\n\n  if (token) {\n    config.headers.Authorization = 'Bearer ' + token;\n  }\n\n  return config;\n});\nconst apiUrl = process.env.REACT_APP_TT_API;\nexport const userSignUp = async formData => {\n  try {\n    let response = await AuthInstance.post(apiUrl + '/auth/register', formData);\n    return response.data;\n  } catch (error) {\n    return error.response.data;\n  }\n};\nexport const loginUser = async formData => {\n  try {\n    let response = await AuthInstance.post(apiUrl + '/auth/login', formData);\n    return response.data;\n  } catch (error) {\n    return error.response.data;\n  }\n};\nexport const forgotPassword = async formData => {\n  try {\n    let response = await AuthInstance.post(apiUrl + '/auth/forgot-password', formData);\n    return response.data;\n  } catch (error) {\n    return error.response.data;\n  }\n};\nexport const resetPassword = async formData => {\n  try {\n    let response = await AuthInstance.post(apiUrl + '/auth/reset-password', formData);\n    return response.data;\n  } catch (error) {\n    return error.response.data;\n  }\n};\nexport const logoutUser = async () => {\n  try {\n    let response = await AuthInstance.get(apiUrl + '/auth/logout');\n    return response.data;\n  } catch (error) {\n    return error.response.data;\n  }\n};","map":{"version":3,"sources":["/home/shine/practiceDcc/src/api/AuthApi.js"],"names":["axios","getToken","setToken","AuthInstance","create","interceptors","response","use","headers","localStorage","setItem","api_token","error","data","message","status","console","log","Promise","reject","request","config","token","Authorization","apiUrl","process","env","REACT_APP_TT_API","userSignUp","formData","post","loginUser","forgotPassword","resetPassword","logoutUser","get"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { getToken, setToken } from 'tt-frontend-utils/Service.js';\n\nconst AuthInstance = axios.create();\nAuthInstance.interceptors.response.use(function (response) {\n  if (response.headers) {\n    localStorage.setItem('api_token', response.headers.api_token);\n  }\n  return response;\n}, function (error) {\n   if(!error.response) {\n      return {data : {data : \"\", message : \"server_error\", status : 500}}\n   } else {\n      if(error.response.status == 500) {\n        return {data : {data : \"\", message : \"server_error\", status : 500}}\n      }\n      console.log(error);/*\n      if(error.response.status == 422) {\n        return {data : {data : \"\", message : error.password, status : 500}}\n      }*/\n      return Promise.reject(error);\n   }\n});\n\nAuthInstance.interceptors.request.use(function (config) {\n    const token = getToken();\n    if (token) {\n      config.headers.Authorization =  'Bearer '+token;\n    }\n\n    return config;\n});\n\nconst apiUrl = process.env.REACT_APP_TT_API;\n\nexport const userSignUp = async (formData) => {\n\ttry {\n\t  let response = await AuthInstance.post(apiUrl+'/auth/register', formData);\n\t  return response.data;\n\t} catch(error) {\n\t  return error.response.data;\n\t}\n};\n\nexport const loginUser = async (formData) => {\n\ttry {\n\t  let response = await AuthInstance.post(apiUrl+'/auth/login', formData);\n\t  return response.data;\n\t} catch(error) {\n\t  return error.response.data;\n\t}\n};\n\nexport const forgotPassword = async (formData) => {\n\ttry {\n\t  let response = await AuthInstance.post(apiUrl+'/auth/forgot-password', formData);\n\t  return response.data;\n\t} catch(error) {\n\t  return error.response.data;\n\t}\n};\n\nexport const resetPassword = async (formData) => {\n\ttry {\n\t  let response = await AuthInstance.post(apiUrl+'/auth/reset-password', formData);\n\t  return response.data;\n\t} catch(error) {\n\t  return error.response.data;\n\t}\n};\n\nexport const logoutUser = async () => {\n\ttry{\n\t  let response = await AuthInstance.get(apiUrl+'/auth/logout');\n\t  return response.data;\n\t} catch(error) {\n\t  return error.response.data;\n\t}\n};\n"]},"metadata":{},"sourceType":"module"}